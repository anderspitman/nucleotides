---
  title: Image API
---

The Nucleotides Project actively encourages developers to submit their
assemblers for benchmarking. A basic API is required so that all Docker
assembler images can be benchmarked consistently. The [ENTRYPOINT][entry] for
each assembler image should be a script, in any language, that accepts three
arguments:

  * A command bundle - this is a short text handle than specifies different
    ways an assembler can be run. These allow the developer to provide
    different ways an assembler can be used for examples of this could be
    `single-cell` or `default`.
  * The location of a gzipped interleaved fastq. This will be passed as a
    string path to a read-only file inside the container.
  * A destination directory where the assembled contigs should be created. This
    is a string path to a writable directory inside the container. The created
    contigs file should be called `contigs.fa`.

The following are examples of Docker images for two assemblers:

  * [IDBA Image][idba]
  * [Spades 3 Image][spades]

Below is a ENTRYPOINT bash script for running velvet. Detailed comments explain
each line. Bash is used here as an example, but any language preferred by the
author can be used as this script will run inside the container.

~~~

#!/bin/bash

# It's good practice to set these variables. This
# will make it easier to debug your assembler if
# you encounter any problems.
set -o errexit
set -o xtrace
set -o nounset

# The first argument is the mode to run the assembler.
# This should match an entry in the Procfile.
readonly PROC=$1

# The second argument is the location of the reads
# in the container file system. The will be present
# in a read-only directory
readonly READS=$2

# The third argument is a directory with
# write-access where the final assembly should be
# written to.
readonly DIR=$3

# The assembly should be written to the file
# "contigs.fa" in the output directory.
readonly ASSEMBLY=$DIR/contigs.fa

# Setup logging. This will make it easier to debug any problems.
LOG=$DIR/log.txt
exec > >(tee ${LOG})
exec 2>&1

# Create a temporary directory to run the assembly
readonly TMP_DIR=$(mktemp -d)

# Determine which command to run by pulling from the Procfile
CMD=$(egrep ^${PROC}: /Procfile | cut -f 2 -d ':')
if [[ -z ${CMD} ]]; then
    echo "Abort, no proc found for '${PROC}'."
    exit 1
fi

# Here is where the assembler is actually run
eval ${CMD}

# Copy contigs to target directory
cp $TMP_DIR/contigs.fa $ASSEMBLY

~~~
{: .language-bash}

[entry]: https://docs.docker.com/reference/builder/#entrypoint

[idba]: https://github.com/nucleotides/docker-idba

[spades]: https://github.com/nucleotides/docker-spades
